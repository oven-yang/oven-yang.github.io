<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oven-yang.github.io/"/>
  <updated>2018-08-29T08:44:02.282Z</updated>
  <id>https://oven-yang.github.io/</id>
  
  <author>
    <name>Oven Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第1章 关于对象</title>
    <link href="https://oven-yang.github.io/2018/08/29/inside-the-cpp-object-model-c1/"/>
    <id>https://oven-yang.github.io/2018/08/29/inside-the-cpp-object-model-c1/</id>
    <published>2018-08-28T16:00:00.000Z</published>
    <updated>2018-08-29T08:44:02.282Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>对象模型</p><ul><li><p>简单对象模型(A Simple Object Model)</p><p>  对象直接保存成员的值. C++中采用的就是这种方法.</p></li><li><p>表格驱动对象模型(A Table-driven Object Model)</p><p>  对象中的每个成员对应一个指针, 指针指向成员实际的值. C++虚表采用这种方法<br>  实现.</p></li></ul></li><li><p>C++对象模型</p><p> 每个类产生一个virtual table, 保存所有虚函数的指针, 对象在所在内存开始位置保<br> 存指向vtable的指针vptr, 在类的构造函数, 析构函数, 复制运算符被调用时自动处<br> 理vptr的值.</p><p> 一般每个对象只有一个vptr, 而当存在虚继承时, 虚继承的直接子类还会产生一个附<br> 加的vptr, 指向自身的virtual table.</p><ul><li><p>单继承, 无虚继承时的对象模型</p><p>  对象的开始处保存一个vptr指针, 非静态数据成员按继承顺序排列.</p></li><li><p>单继承, 有虚继承时的对象模型</p><p>  采用虚继承的类会在产生多个vptr, 对象开始处是父类的vptr, 父类成员之后,<br>  子类成员之前保存子类的vptr.  如下:</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span> m_bb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> BB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_b1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span> :</span> <span class="keyword">public</span> B1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_dd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span> :</span> <span class="keyword">public</span> DD</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_d1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// D1对象的结构, gcc 8.2.0, GNU gdb 8.1.1</span></span><br><span class="line">&#123;</span><br><span class="line">    &lt;DD&gt; = </span><br><span class="line">    &#123;</span><br><span class="line">        &lt;B1&gt; = </span><br><span class="line">        &#123;</span><br><span class="line">            &lt;BB&gt; = </span><br><span class="line">            &#123;</span><br><span class="line">                _vptr.BB = &lt;vtable <span class="keyword">for</span> D1+<span class="number">112</span>&gt;, <span class="comment">// 父类的vptr</span></span><br><span class="line">                m_bb</span><br><span class="line">            &#125;, </span><br><span class="line">            _vptr.B1 = &lt;vtable <span class="keyword">for</span> D1+<span class="number">24</span>&gt;, <span class="comment">// 虚继承子类B1的vptr</span></span><br><span class="line">            m_b1</span><br><span class="line">        &#125;, </span><br><span class="line">        m_dd</span><br><span class="line">    &#125;, </span><br><span class="line">    m_d1 <span class="comment">// 没有采用虚继承, 因此与基类BB共用vptr.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多继承, 无虚继承时的对象模型</p><p>  保留多个父类的vptr.</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span> m_bb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> :</span> <span class="keyword">public</span> BB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_b1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> :</span> <span class="keyword">public</span> BB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_b2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span> :</span> <span class="keyword">public</span> B1, B2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_dd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// DD对象的结构, gcc 8.2.0, GNU gdb 8.1.1</span></span><br><span class="line">&#123;</span><br><span class="line">    &lt;B1&gt; = </span><br><span class="line">    &#123;</span><br><span class="line">        &lt;BB&gt; = </span><br><span class="line">        &#123;</span><br><span class="line">            _vptr.BB = &lt;vtable <span class="keyword">for</span> DD+<span class="number">16</span>&gt;, <span class="comment">// B1的vptr</span></span><br><span class="line">            m_bb</span><br><span class="line">        &#125;, </span><br><span class="line">        m_b1</span><br><span class="line">    &#125;, </span><br><span class="line">    &lt;B2&gt; = </span><br><span class="line">    &#123;</span><br><span class="line">        &lt;BB&gt; = </span><br><span class="line">        &#123;</span><br><span class="line">            _vptr.BB = &lt;vtable <span class="keyword">for</span> DD+<span class="number">80</span>&gt;, <span class="comment">// B2的vptr</span></span><br><span class="line">            m_bb</span><br><span class="line">        &#125;, </span><br><span class="line">        m_b2</span><br><span class="line">    &#125;, </span><br><span class="line">    m_dd</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">BB *bp = <span class="keyword">new</span> DD; <span class="comment">// 有歧义</span></span><br><span class="line">BB *bp1 = <span class="keyword">dynamic_cast</span>&lt;B1*&gt;(<span class="keyword">new</span> DD); <span class="comment">// 正确</span></span><br><span class="line">BB *bp2 = <span class="keyword">dynamic_cast</span>&lt;B2*&gt;(<span class="keyword">new</span> DD); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>  很自然地, 当用BB类型的指针/引用保存DD对象时, 就会出现歧义, 编译器无法确<br>  定采用B1中的BB还是B2中BB. 可以使用dynamic_cast进行干预, 以达到预期目的.</p></li><li><p>多继承, 有虚继承时的对象模型</p><p>  有了上面的结论, 就不难推测这种情况下的对象模型了.</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span> m_bb;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> BB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_b1;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> BB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_b2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span> :</span> <span class="keyword">public</span> B1, B2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> m_dd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// DD对象的结构, gcc 8.2.0, GNU gdb 8.1.1</span></span><br><span class="line">&#123;</span><br><span class="line">    &lt;B1&gt; = </span><br><span class="line">    &#123;</span><br><span class="line">        &lt;BB&gt; = </span><br><span class="line">        &#123;</span><br><span class="line">            _vptr.BB = &lt;vtable <span class="keyword">for</span> DD+<span class="number">160</span>&gt;,</span><br><span class="line">            m_bb = <span class="number">1</span></span><br><span class="line">        &#125;, </span><br><span class="line">        _vptr.B1 = &lt;vtable <span class="keyword">for</span> DD+<span class="number">24</span>&gt;, </span><br><span class="line">        m_b1</span><br><span class="line">    &#125;, </span><br><span class="line">    &lt;B2&gt; = </span><br><span class="line">    &#123;</span><br><span class="line">        _vptr.B2 = &lt;vtable <span class="keyword">for</span> DD+<span class="number">88</span>&gt;, </span><br><span class="line">        m_b2</span><br><span class="line">    &#125;, </span><br><span class="line">    m_dd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>关键字class和struct的区别</p><p> 二者在绝大多数情况下是完全相同的, 可以互换, 只有几点不同.</p><p> class可以用于模板声明, struct不可以. C++引入class关键字, 保留struct的一个原<br> 因是为了体现OO, 并且兼容C, 而C中不需要模板, 也就不需要保证struct可以用于模板.</p><p> 另外, 当用于声明类类型时二者略有差别:</p><ul><li><p>用class声明的类的成员的默认访问级别是private, 用struct声明的类的成员的默<br>认访问级别是public.</p></li><li><p>有继承时, 用class声明的类的默认继承方式是private, 用struct声明的类的默认<br>继承方式是public. 这里的class, struct是指用于子类, 父类的声明方式不影响默<br>认方式. 如下代码:</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span> :</span> BB &#123;&#125;; <span class="comment">// private继承</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D2</span> :</span> BB &#123;&#125;; <span class="comment">// public继承</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>运行时多态必须通过public继承实现</p><p> 这个设计是符合逻辑的. 可以设想, 如果使用其他继承方式, 那么从逻辑上说, 在类<br> 外不应该能访问父类成员. 但是要实现运行时多态, 正常做法是将子类指针/引用赋值<br> 给一个父类类型的指针/引用(设为bp), 一旦复制成功, 我们就可以通过bp访问父类的<br> public成员, 这显然与前面的逻辑要求矛盾. 所以, 在C++中, 前面说得”赋值”是违法<br> 的. 而没有这个”赋值”操作, 也就无法实现运行时多态, 因此必须通过public继承实<br> 现运行时多态.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;对象模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单对象模型(A Simple Object Model)&lt;/p&gt;
&lt;p&gt;  对象直接保存成员的值. C++中采用的就是这种方法.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表格驱动对象模型(A Table-driven 
      
    
    </summary>
    
      <category term="深度探索C++对象模型笔记" scheme="https://oven-yang.github.io/categories/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C++" scheme="https://oven-yang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>对象初始化的方法</title>
    <link href="https://oven-yang.github.io/2017/11/08/object-initilize-methods/"/>
    <id>https://oven-yang.github.io/2017/11/08/object-initilize-methods/</id>
    <published>2017-11-07T16:00:00.000Z</published>
    <updated>2018-08-29T14:14:02.462Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="初始化的含义"><a href="#初始化的含义" class="headerlink" title="初始化的含义"></a>初始化的含义</h2>  所谓初始化，就是给一个变量一个初始值，在使用一个变量的值之前，<br>  需要对其进行初始化，否则，得到的就是一个无意义的值。</li><li><h2 id="初始化的方法"><a href="#初始化的方法" class="headerlink" title="初始化的方法"></a>初始化的方法</h2></li><li><h3 id="用圆括号：type-var-expression-list"><a href="#用圆括号：type-var-expression-list" class="headerlink" title="用圆括号：type var(expression-list)"></a>用圆括号：<strong>type var(expression-list)</strong></h3>圆括号中是我们提供给构造函数的参数，看下面的例子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i</span><span class="params">(<span class="number">1</span>)</span> </span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"hello"</span>)</span> </span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="built_in">string</span> s ;</span><br><span class="line">    MyClass();</span><br><span class="line">    MyClass(<span class="keyword">int</span> , <span class="keyword">const</span> <span class="built_in">string</span>&amp;) ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">1</span> , <span class="string">"hello"</span>)</span> </span>;</span><br></pre></td></tr></table></figure><p>这是一种显示初始化的方式，相当于主动调用对应类型的构造函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i</span><span class="params">(<span class="number">1.1</span>)</span> </span>;</span><br><span class="line"><span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">1.1</span> , <span class="string">"hello"</span>)</span> </span>;</span><br></pre></td></tr></table></figure></p><p> 注意，如果想采用默认初始化方式初始化一个变量，下面的做法是错误的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i</span><span class="params">()</span> </span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">()</span> </span>;</span><br><span class="line"><span class="function">MyClass <span class="title">obj</span><span class="params">()</span> </span>;</span><br></pre></td></tr></table></figure></p><p>因为编译器会将其看作是函数声明，而不是变量定义。正确的做法应该1是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="keyword">int</span> ii&#123;&#125; ;</span><br><span class="line"><span class="built_in">string</span> s ;</span><br><span class="line"><span class="built_in">string</span> ss&#123;&#125; ;</span><br><span class="line">MyClass obj ;</span><br><span class="line">MyClass objj&#123;&#125; ;</span><br></pre></td></tr></table></figure></p><p>说到这里，就不得不提到 <strong><em>the Most Vexing Parse</em></strong> ，请看下面：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Timer();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeKeeper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TimeKeeper(<span class="keyword">const</span> Timer&amp; t);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_time</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TimeKeeper time_keeper(Timer());  // 1</span><br><span class="line">    <span class="keyword">return</span> time_keeper.get_time();    <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代码来自 <a href="https://en.wikipedia.org/wiki/Most_vexing_parse" title="most vexing parse" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>上面代码的标注1的那行会被看作是一个名字为<em>time_keep</em>的函数，返回值是 <em>TimeKeeper</em> 类型，参数是一个返回值为<em>Timer</em>类型的函数指针，而不是对象定义。要实现后者，可以这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TimeKeeper time_keeper((Timer());</span><br></pre></td></tr></table></figure><p>更好的做法是使用C++11定义的用{}来初始化对象,可以避免很多错误。</p><ul><li><h3 id="用等于号：type-var-expression"><a href="#用等于号：type-var-expression" class="headerlink" title="用等于号：type var = expression"></a>用等于号：<strong>type var = expression</strong></h3>对于内置类型来说，=初始化和()初始化几乎没有区别(我也不知道区别在哪里)。</li></ul><p>对于类类型，=初始化调用的是copy构造函数，而赋值是调用重载的=操作符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass c1 = c0 ;   <span class="comment">// call MyClass(const MyClass&amp;)</span></span><br><span class="line">c1 = c0 ;           <span class="comment">// call operator =(const MyClass&amp;)</span></span><br></pre></td></tr></table></figure><p>等于号经常和大括号{}一起用于初始化,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyClass c = &#123;<span class="number">1</span> , <span class="string">"123"</span>&#125; ;</span><br></pre></td></tr></table></figure><ul><li><h3 id="用大括号：type-var-initializer-list-C-11推荐"><a href="#用大括号：type-var-initializer-list-C-11推荐" class="headerlink" title="用大括号：type var{initializer-list} //C++11推荐"></a>用大括号：<strong>type var{initializer-list}</strong> //C++11推荐</h3><p>C++11为了解决C++98混乱的初始化方式而提出的一种初始化方式: <strong><em>uniform initialization</em></strong> ，保证它可以用于所有的初始化。实现方式就是采用大括号。下面介绍一些{}与而其他初始化语法的不同之处：</p><ul><li>大括号初始化不允许对内置类型进行隐式的窄化类型转换(<strong><em>implicit narrowing conversion</em></strong>)，而但是注意，这个类型转换不仅仅依据类型，还会依据值的大小。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1&#123;<span class="number">10</span>&#125; ;   <span class="comment">// 正确，10是int 类型，但是可以char大小可以保存</span></span><br><span class="line"><span class="keyword">char</span> c2&#123;<span class="number">256</span>&#125; ;  <span class="comment">// 错误，256超过了char可保存的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">i1</span><span class="params">(<span class="number">11.11</span>)</span> </span>; <span class="comment">// 正确，i1 == 11</span></span><br><span class="line"><span class="keyword">int</span> i2&#123;<span class="number">11.11</span>&#125; ; <span class="comment">// 错误，会出现精度损失</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>想要在定义非静态类成员时为成员赋初值(称为 <strong><em>default member initialize</em></strong>)，只能使用=和{}来初始化，不允许使用()。</p></li><li><p>初始化数组和标准库容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; ;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; ;</span><br></pre></td></tr></table></figure></li><li><p>初始化不可复制的对象(<strong><em>uncopyable objects</em></strong>)，比如 <strong><em>std::atomic</em></strong> ,这里就只能用 {} 和 () ，而不能用 = 。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai_1&#123;<span class="number">0</span>&#125; ;    <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai_1(<span class="number">0</span>) ;    <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai_1 = <span class="number">0</span> ;   <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="什么也不用：type-var"><a href="#什么也不用：type-var" class="headerlink" title="什么也不用：type var"></a>什么也不用：<strong>type var</strong></h3>有时候我们可能直接定义一个对象，没有添加=、{}、()以显式地初始化，比如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="built_in">string</span> s ;</span><br><span class="line">MyClass c ;</span><br></pre></td></tr></table></figure></li></ul><p>这种情况下根据定义所在的位置和对象类型的不同，有不同的初始化行为。</p><ul><li><p>对于类类型，会自动调用类的默认构造函数来初始化对象。</p></li><li><p>对于内置类型，当变量在全局作用域或者被定义为局部静态变量时，会被<strong>默认初始化</strong>，一般是<strong>零初始化</strong>。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i ;   <span class="comment">// i == 0</span></span><br><span class="line"><span class="keyword">double</span> d ;<span class="comment">// d == 0</span></span><br><span class="line"><span class="keyword">bool</span> b ;  <span class="comment">// b == false</span></span><br><span class="line">MyClass c ;   <span class="comment">// 调用MyClass()构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i ;  <span class="comment">// i == 0</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>而对于自动变量，则默认初始化得到的是一个不定值。绝大多数情况下使用这个变量都会是一个未定义的行为，例外请参考：<a href="http://en.cppreference.com/w/cpp/language/default_initialization" title="默认初始化" target="_blank" rel="noopener">cppreference</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;初始化的含义&quot;&gt;&lt;a href=&quot;#初始化的含义&quot; class=&quot;headerlink&quot; title=&quot;初始化的含义&quot;&gt;&lt;/a&gt;初始化的含义&lt;/h2&gt;  所谓初始化，就是给一个变量一个初始值，在使用一个变量的值之前，&lt;br&gt;  需要对其进行初始化
      
    
    </summary>
    
      <category term="C++" scheme="https://oven-yang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://oven-yang.github.io/tags/C/"/>
    
  </entry>
  
</feed>
